backend:
app.js
import express from 'express';
import categoryRouter from './routes/category.route.js';
import productRouter from './routes/product.route.js';

const app = express();

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.use('/api', categoryRouter);
app.use('/api', productRouter);

export { app };

index.js
import { app } from "./app.js";
import dotenv from 'dotenv/config';
import { connectDB } from "./database/db.js";

connectDB()
    .then(()=>{
        app.listen(process.env.PORT,()=>{
            console.log(`Server Up and Running at port: ${process.env.PORT}`);
        })
    })
    .catch((error)=>{
        console.error("Error Connecting DB: Index.js",error);
    })

asyncWrapper.utils.js
const asyncWrapper = (fn) => {
    return (req, res, next) => {
      fn(req, res, next).catch(next);
    };
  };
  

export default asyncWrapper

saveLocally.utils.js
import fs from "fs";
import path from "path";

const saveImageLocally = (file) => {
    try {
        const uploadsDir = path.join("uploads");
        if (!fs.existsSync(uploadsDir)) fs.mkdirSync(uploadsDir);

        const uniqueFilename = `${Date.now()}_${file.originalname}`;
        const localPath = path.join(uploadsDir, uniqueFilename);

        fs.writeFileSync(localPath, file.buffer);

        return `/uploads/${uniqueFilename}`;
    } catch (err) {
        throw new Error("Failed to save image locally");
    }
};

export default saveImageLocally;

category.route.js
import { Router } from "express";
import {createCategory, createSubCategory} from "../controllers/category.controller.js";
import {upload} from "../middlewares/multer.middleware.js";

const categoryRouter = Router();

// Use `upload.array` to handle multiple files
categoryRouter.route('/addCategory').post(upload.array('categoryImage', 5), createCategory);
categoryRouter.route('/addSubCategory').post(createSubCategory);

export default categoryRouter;

product.route.js
import { Router } from "express";
import createProduct from "../controllers/product.controller.js";
import { uploadProductImages } from "../middlewares/multer.middleware.js";

const productRouter = Router();

productRouter.post("/addProduct", uploadProductImages, createProduct);

export default productRouter;

category.model.js
import mongoose from 'mongoose';

const categorySchema = new mongoose.Schema({
  categoryName: {
    type: String,
    required: true,
    trim: true
  },
  subCategory: {
    type: String, // Array of subcategory names
    required:true,
  },
  slug: {
    type: String,
    required: true,
    unique: true,
    lowercase: true,
    trim: true
  },
  image: {
    type: String, // Can be a URL or file path
    default: ''
  },
  description: {
    type: String,
    default: ''
  }
}, { timestamps: true });

const Category = mongoose.model('Category', categorySchema);

export default Category;

product.model.js
import mongoose from "mongoose";

const productSchema = new mongoose.Schema(
    {
        productName: {
            type: String,
            required: true,
            trim: true,
        },

        category: {
            type: mongoose.Schema.Types.ObjectId,
            ref: "Category",
            required: true,
        },

        subCategory: {
            type: mongoose.Schema.Types.ObjectId,
            ref: "Category",
            required: true,
        },

        displayImage: {
            type: String, 
            required: true,
        },

        otherImages: {
            type: [String], 
            validate: [arrayLimit, "Exceeds the limit of 5 images"],
        },

        availability: {
            type: String,
            enum: ["ReadyToShip", "OnBooking"],
            default: "ReadyToShip",
        },

        productType: {
            type: String,
            enum: ["Hot_Product", "BestSeller", "Todays_Deal"],
            default: "Hot_Product",
        },

        stock: {
            type: Number,
            required: true,
            min: 0,
        },

        weight: {
            type: Number,
            required: true,
        },

        mrp: {
            type: Number,
            required: true,
        },

        salePrice: {
            type: Number,
            required: true,
        },

        productDescription: {
            type: String,
            required: true,
        },
    },
    { timestamps: true }
);

function arrayLimit(val) {
    return val.length <= 5;
}

const Product = mongoose.model("Product", productSchema);

export default Product;

multer.middleware.js
import multer from "multer";
import path from "path";
import fs from 'fs';

const storage = multer.memoryStorage();

if (!fs.existsSync('uploads')) {
    fs.mkdirSync('uploads');
}

const fileFilter = (req, file, cb) => {
    const allowedTypes = /jpeg|jpg|png|gif/;
    const ext = path.extname(file.originalname).toLowerCase();
    if (allowedTypes.test(ext)) {
        cb(null, true);  
    } else {
        cb(new Error('Only image files are allowed'), false);  
    }
};

const upload = multer({ 
    storage, 
    fileFilter, 
    limits: { fileSize: 1024 * 1024 * 5 }  
});

const uploadProductImages = upload.fields([
    { name: "displayImage", maxCount: 1 },
    { name: "otherImages", maxCount: 5 },
]);

export { uploadProductImages, upload }; 

db.js
import mongoose from "mongoose";

const MONGO_URI = process.env.MONGO_URI;
const DATABASE = process.env.MONGO_DB;

const connectDB = async() =>{
    try {
        const connectionInstance = await mongoose.connect(`${MONGO_URI}/${DATABASE}`);

        console.log("Database Connected Successfully");
        // console.log(connectionInstance);
    } catch (error) {
        console.error("Error Connecting Database: ",error.message);        
    }
}

export {connectDB}

category.controller.js
import Category from "../models/category.model.js";
import asyncWrapper from '../utils/asyncWrapper.utils.js'
import saveImageLocally from "../utils/saveLocally.utils.js";

const createCategory = asyncWrapper(async (req, res) => {
    try {
       let slug = req.body.categoryName + '-' + req.body.subCategory; // Concatenate category and subcategory
        slug = slug.replace(/\s+/g, '-').toLowerCase(); // Replace spaces with hyphens and make lowercase
        slug = slug.replace(/[^a-z0-9-]/g, ''); // Remove unwanted characters

        if (!req.files || req.files.length === 0) {
            return res.status(400).json({ message: "No files uploaded" });
        }

        const localImageUrls = req.files.map(file => saveImageLocally(file));

        const category = new Category({
            categoryName: req.body.categoryName,
            subCategory: req.body.subCategory,
            slug: slug,
            image: localImageUrls[0],
            description: req.body.description
        });

        await category.save();

        return res.status(201).json({ message: "Category created successfully", category });
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: "Error creating category", error: error.message });
    }
});

const createSubCategory = asyncWrapper(async(req,res)=>{
    const {subCategory} = req.body.subCategory;
    const query = req.query;
    let category = query.split("-")[0];
    console.log(category);
    
})

export {createCategory,createSubCategory};

product.controller.js
import Product from "../models/product.model.js";
import asyncWrapper from "../utils/asyncWrapper.utils.js";
import saveImageLocally from "../utils/saveLocally.utils.js";

const createProduct = asyncWrapper(async (req, res) => {
    try {
        if (!req.files || !req.files.displayImage || !req.files.otherImages) {
            return res.status(400).json({ message: "Both displayImage and otherImages are required" });
        }

        const displayImagePath = saveImageLocally(req.files.displayImage[0]);

        const otherImageFiles = req.files.otherImages;
        if (otherImageFiles.length > 5) {
            return res.status(400).json({ message: "You can upload up to 5 other images only." });
        }
        const otherImagePaths = otherImageFiles.map(file => saveImageLocally(file));

        const product = new Product({
            productName: req.body.productName,
            category: req.body.category,
            subCategory: req.body.subCategory,
            displayImage: displayImagePath,
            otherImages: otherImagePaths,
            availability: req.body.availability,
            productType: req.body.productType,
            stock: req.body.stock,
            weight: req.body.weight,
            mrp: req.body.mrp,
            salePrice: req.body.salePrice,
            productDescription: req.body.productDescription,
        });

        await product.save();

        return res.status(201).json({
            message: "Product created successfully",
            product,
        });
    } catch (error) {
        console.error("Error creating product:", error);
        return res.status(500).json({
            message: "Server error",
            error: error.message,
        });
    }
});

export default createProduct;

-------------------------------------

i want to create a frontend in react using vite which communicates to the backend running on localhost:3001
you can use nay library n frontend

i want 2 forms:

	1st form with fields:
		>Category Name (input text)
		>slug should be shown just below the categoryName
		>upload single image (input text)
		>description (should be CK EDITOR) (input text)
		>submit button (should submit the formData and close the dialog)
	
	2nd form with fields:
		>selectCategory (dropdown that should be searchable and should be populated from the data of db)
		>sub categoryName (dropdown that should be populated from the data of db)
		>DisplayImage (Single image)
		>select subImage (upTo 5 images and user should be able to see the images in small thumbnails when uploading)
		>availability (Radio button 1.onBooking 2.readyToShip(selected))
		>product type (checkbox 1.HotProduct 2.bestSeller 3.todaysDeal)
		>stock (input Number)
		>weight (input Number)
		>MRP (input Number)
		>SalePrice (input Number)
		>description (should be CK EDITOR) (input text)
		>submit button (should submit the formData acknowledge user and close the dialog)
	
	3rd page
		>should display both table
			1.Tabular form with all the categories	(fields are: categoryName , subCategoryName, slug, image, description)
			2.tabular form with all the products listing (fields are:  productName, category, subCategory, displayImage, otherImages, availability, productType, stock, weight, mrp, salePrice, productDescription)
		>should have 2 buttons one for opening the first form and another for opening the second form but in dialog box 


project structure
/
│   README.md
├───.qodo
├───frontend
│   │   .gitignore
│   │   eslint.config.js
│   │   index.html
│   │   package-lock.json
│   │   package.json
│   │   README.md
│   │   tailwind.config.jsx
│   │   vite.config.js
│   ├───.qodo
│   ├───public
│   │       vite.svg
│   └───src
│       │   App.css
│       │   App.jsx
│       │   index.css
│       │   main.jsx
│       ├───assets
│       │       react.svg
│       ├───components
│       │       CategoryForm.jsx
│       │       ProductForm.jsx
│       │       SubCategoryForm.jsx
│       ├───pages
│       │       Dashboard.jsx
│       └───services
│               api.jsx
└───server
    │   .env
    │   .gitignore
    │   app.js
    │   index.js
    │   package-lock.json
    │   package.json
    │   task_details.txt
    ├───.qodo
    ├───constants
    │       .gitkeep
    ├───controllers
    │       category.controller.js
    │       product.controller.js
    ├───database
    │       db.js
    ├───middlewares
    │       multer.middleware.js
    ├───models
    │       category.model.js
    │       product.model.js
    ├───routes
    │       category.route.js
    │       product.route.js
    ├───uploads
    └───utils
            asyncWrapper.utils.js
            saveLocally.utils.js